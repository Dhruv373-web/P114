m = 1
c = 0
y = []
for x in height:
  y_value = m*x + c
  y.append(y_value)

#Plotting the points
fig = px.scatter(x=height, y=weight)
fig.update_layout(shapes=[
    dict(
      type= 'line',
      y0= min(y), y1= max(y),
      x0= min(height), x1= max(height)
    )
])
fig.show()
import numpy as np
GRE_Score_array = np.array(GRE_Score)
Chance_of_admit_array = np.array(Chances_of_admit)

#Slope and intercept using pre-built function of Numpy
m, c = np.polyfit(GRE_Score_array,Chance_of_admit_array,1)

y = []
for x in GRE_Score_array:
  y_value = m*x + c
  y.append(y_value)

#plotting the graph
fig = px.scatter(x=GRE_Score_array, y=Chance_of_admit_array)
fig.update_layout(shapes=[
    dict(
      type= 'line',
      y0= min(y), y1= max(y),
      x0= min(GRE_Score_array), x1= max(GRE_Score_array)
    )
])
fig.show()
x = 600
y = m * x + c
print(f"Chances of admit of someone based on their GRE Score {x} is {y}")
